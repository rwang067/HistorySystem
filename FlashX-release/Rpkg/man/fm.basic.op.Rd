% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FlashR.R
\docType{data}
\name{fm.basic.op}
\alias{fm.basic.op}
\alias{fm.bo.add}
\alias{fm.bo.and}
\alias{fm.bo.count}
\alias{fm.bo.div}
\alias{fm.bo.eq}
\alias{fm.bo.euclidean}
\alias{fm.bo.ge}
\alias{fm.bo.gt}
\alias{fm.bo.le}
\alias{fm.bo.lt}
\alias{fm.bo.max}
\alias{fm.bo.min}
\alias{fm.bo.mul}
\alias{fm.bo.neq}
\alias{fm.bo.or}
\alias{fm.bo.pow}
\alias{fm.bo.sub}
\alias{fm.bo.which.max}
\alias{fm.bo.which.min}
\alias{fm.buo.abs}
\alias{fm.buo.as.int}
\alias{fm.buo.as.numeric}
\alias{fm.buo.ceil}
\alias{fm.buo.floor}
\alias{fm.buo.log}
\alias{fm.buo.log10}
\alias{fm.buo.log2}
\alias{fm.buo.neg}
\alias{fm.buo.not}
\alias{fm.buo.round}
\alias{fm.buo.sqrt}
\alias{fm.get.basic.op}
\alias{fm.get.basic.uop}
\alias{fm.init.basic.op}
\title{The basic operators supported by FlashR.}
\format{An object of class \code{NULL} of length 0.}
\usage{
fm.get.basic.op(name)

fm.get.basic.uop(name)

fm.bo.add

fm.bo.sub

fm.bo.mul

fm.bo.div

fm.bo.min

fm.bo.max

fm.bo.pow

fm.bo.eq

fm.bo.neq

fm.bo.gt

fm.bo.ge

fm.bo.lt

fm.bo.le

fm.bo.or

fm.bo.and

fm.bo.count

fm.bo.which.max

fm.bo.which.min

fm.bo.euclidean

fm.buo.neg

fm.buo.sqrt

fm.buo.abs

fm.buo.not

fm.buo.ceil

fm.buo.floor

fm.buo.log

fm.buo.log2

fm.buo.log10

fm.buo.round

fm.buo.as.int

fm.buo.as.numeric

fm.init.basic.op()
}
\arguments{
\item{name}{the name of the basic operator.}
}
\value{
a reference to the specified basic operator.
}
\description{
The basic operators are mainly used by the FlashR functions that
accept operators as arguments. Such a function includes \code{fm.mapply},
\code{fm.inner.prod}, etc.
}
\details{
\code{fm.get.basic.op} gets the predefined basic binary operator specified by a user.
The supported basic binary operators are:
\itemize{
\item{"add" or "+"}{compute addition.}
\item{"sub" or "-"}{compute subtraction;}
\item{"mul" or "*"}{compute multiplication;}
\item{"div" or "/"}{compute division;}
\item{"min" and "max"}{compute minimum and maximum, respectively;}
\item{"pow"}{compute exponential;}
\item{"eq" or "=="}{compute equality;}
\item{"gt" or ">"}{compute greater than;}
\item{"ge" or ">="}{compute greater than or equal to;}
\item{"lt" or "<"}{compute less than;}
\item{"le" or "<="}{compute less than or equal to;}
}

\code{fm.get.basic.uop} gets the predefined basic unary operator specified by a user.
The supported basic unary operators are:
\itemize{
\item{"neg"}{compute negate;}
\item{"sqrt"}{compute square root;}
\item{"abs"}{compute absolute value;}
\item{"not"}{compute logical NOT;}
\item{"ceil" and "floor"}{compute a ceiling and a floor, respectively;}
\item{"log", "log2" and "log10"}{compute log with different bases;}
\item{"round"}{round a number;}
\item{"as.int" and "as.numeric"}{cast a number to an integer and a numeric
value, respectively.}
}

\code{fm.init.basic.op} initializes the following basic operators.
\itemize{
\item{\code{fm.bo.add}}{the predifined basic binary operator for addition.}
\item{\code{fm.bo.sub}}{the predifined basic binary operator for subtraction.}
\item{\code{fm.bo.mul}}{the predifined basic binary operator for multiplication.}
\item{\code{fm.bo.div}}{the predifined basic binary operator for division.}
\item{\code{fm.bo.min}}{the predifined basic binary operator for computing minimum.}
\item{\code{fm.bo.max}}{the predifined basic binary operator for computing maximum.}
\item{\code{fm.bo.pow}}{the predifined basic binary operator for computing exponential.}
\item{\code{fm.bo.eq}, \code{fm.bo.neq}, \code{fm.bo.gt}, \code{fm.bo.ge},
      \code{fm.bo.lt} and \code{fm.bo.le}}
{the predefined basic logical operators to compare two elements: ==, >, >=, <, <=.}
\item{\code{fm.buo.neg}}{the predefined basic unary operator for negate.}
\item{\code{fm.buo.sqrt}}{the predefined basic unary operator for square root.}
\item{\code{fm.buo.abs}}{the predefined basic unary operator for absolute value.}
\item{\code{fm.buo.not}}{the predefined logical NOT operator.}
\item{\code{fm.buo.ceil}}{the predefined basic unary operator of computing
      a ceiling of a number.}
\item{\code{fm.buo.floor}}{the predefined basic unary operator of computing
      a floor of a number.}
\item{\code{fm.buo.log}, \code{fm.buo.log2} and \code{fm.buo.log10}}{
      the predefined basic unary operators of computing log with different
      bases.}
\item{\code{fm.buo.round}}{the predefined basic unary operator of rounding
      a value.}
\item{\code{fm.buo.as.int}}{the predefined basic unary operator of casting
      a numeric value to an integer.}
\item{\code{fm.buo.as.numeric}}{the predefined basic unary operator of
      casting an integer to a numeric value.}
}
}
\author{
Da Zheng <dzheng5@jhu.edu>
}
\keyword{datasets}

