% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FlashR.R
\docType{methods}
\name{ifelse}
\alias{ifelse}
\alias{ifelse,fm,ANY,fm-method}
\alias{ifelse,fm,fm,ANY-method}
\alias{ifelse,fmV,ANY,fmV-method}
\alias{ifelse,fmV,fmV,ANY-method}
\title{Conditional Element Selection}
\usage{
\S4method{ifelse}{fm,fm,ANY}(test, yes, no)

\S4method{ifelse}{fm,ANY,fm}(test, yes, no)

\S4method{ifelse}{fmV,fmV,ANY}(test, yes, no)

\S4method{ifelse}{fmV,ANY,fmV}(test, yes, no)
}
\arguments{
\item{test}{a logical FlashR vector or matrix.}

\item{yes}{a FlashR vector or matrix or an R scalar.}

\item{no}{a FlashR vector or matrix or an R scalar.}
}
\value{
A FlashR vector or matrix of the same size and attributes
(including dimensions) as \code{test} and data values from the values
of \code{yes} or \code{no}.
}
\description{
\code{ifelse} returns a value with the same shape as \code{test} which is
filled with elements selected from either \code{yes} or \code{no} depending
on whether the element of \code{test} is \code{TRUE} or \code{FALSE}.
}
\details{
The current implementation requires either \code{yes} or \code{no} to be
a scalar value.
}
\examples{
mat <- fm.runif.matrix(100, 10)
mat <- ifelse(mat > 0.5, mat, 0)
}

