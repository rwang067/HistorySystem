% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FlashR_base.R
\docType{methods}
\name{Comparison}
\alias{!=,ANY,fm-method}
\alias{!=,ANY,fmV-method}
\alias{!=,fm,ANY-method}
\alias{!=,fm,fm-method}
\alias{!=,fm,fmV-method}
\alias{!=,fm,matrix-method}
\alias{!=,fmV,ANY-method}
\alias{!=,fmV,fm-method}
\alias{!=,fmV,fmV-method}
\alias{!=,matrix,fm-method}
\alias{<,ANY,fm-method}
\alias{<,ANY,fmV-method}
\alias{<,fm,ANY-method}
\alias{<,fm,fm-method}
\alias{<,fm,fmV-method}
\alias{<,fm,matrix-method}
\alias{<,fmV,ANY-method}
\alias{<,fmV,fm-method}
\alias{<,fmV,fmV-method}
\alias{<,matrix,fm-method}
\alias{<=,ANY,fm-method}
\alias{<=,ANY,fmV-method}
\alias{<=,fm,ANY-method}
\alias{<=,fm,fm-method}
\alias{<=,fm,fmV-method}
\alias{<=,fm,matrix-method}
\alias{<=,fmV,ANY-method}
\alias{<=,fmV,fm-method}
\alias{<=,fmV,fmV-method}
\alias{<=,matrix,fm-method}
\alias{==,ANY,fm-method}
\alias{==,ANY,fmV-method}
\alias{==,fm,ANY-method}
\alias{==,fm,fm-method}
\alias{==,fm,fmV-method}
\alias{==,fm,matrix-method}
\alias{==,fmV,ANY-method}
\alias{==,fmV,fm-method}
\alias{==,fmV,fmV-method}
\alias{==,matrix,fm-method}
\alias{>,ANY,fm-method}
\alias{>,ANY,fmV-method}
\alias{>,fm,ANY-method}
\alias{>,fm,fm-method}
\alias{>,fm,fmV-method}
\alias{>,fm,matrix-method}
\alias{>,fmV,ANY-method}
\alias{>,fmV,fm-method}
\alias{>,fmV,fmV-method}
\alias{>,matrix,fm-method}
\alias{>=,ANY,fm-method}
\alias{>=,ANY,fmV-method}
\alias{>=,fm,ANY-method}
\alias{>=,fm,fm-method}
\alias{>=,fm,fmV-method}
\alias{>=,fm,matrix-method}
\alias{>=,fmV,ANY-method}
\alias{>=,fmV,fm-method}
\alias{>=,fmV,fmV-method}
\alias{>=,matrix,fm-method}
\alias{Comparison}
\title{Relational Operators}
\usage{
\S4method{==}{fm,fm}(e1, e2)

\S4method{==}{fmV,fmV}(e1, e2)

\S4method{==}{fm,fmV}(e1, e2)

\S4method{==}{fmV,fm}(e1, e2)

\S4method{==}{fm,matrix}(e1, e2)

\S4method{==}{matrix,fm}(e1, e2)

\S4method{==}{fm,ANY}(e1, e2)

\S4method{==}{ANY,fm}(e1, e2)

\S4method{==}{fmV,ANY}(e1, e2)

\S4method{==}{ANY,fmV}(e1, e2)

\S4method{!=}{fm,fm}(e1, e2)

\S4method{!=}{fmV,fmV}(e1, e2)

\S4method{!=}{fm,fmV}(e1, e2)

\S4method{!=}{fmV,fm}(e1, e2)

\S4method{!=}{fm,matrix}(e1, e2)

\S4method{!=}{matrix,fm}(e1, e2)

\S4method{!=}{fm,ANY}(e1, e2)

\S4method{!=}{ANY,fm}(e1, e2)

\S4method{!=}{fmV,ANY}(e1, e2)

\S4method{!=}{ANY,fmV}(e1, e2)

\S4method{>}{fm,fm}(e1, e2)

\S4method{>}{fmV,fmV}(e1, e2)

\S4method{>}{fm,fmV}(e1, e2)

\S4method{>}{fmV,fm}(e1, e2)

\S4method{>}{fm,matrix}(e1, e2)

\S4method{>}{matrix,fm}(e1, e2)

\S4method{>}{fm,ANY}(e1, e2)

\S4method{>}{ANY,fm}(e1, e2)

\S4method{>}{fmV,ANY}(e1, e2)

\S4method{>}{ANY,fmV}(e1, e2)

\S4method{>=}{fm,fm}(e1, e2)

\S4method{>=}{fmV,fmV}(e1, e2)

\S4method{>=}{fm,fmV}(e1, e2)

\S4method{>=}{fmV,fm}(e1, e2)

\S4method{>=}{fm,matrix}(e1, e2)

\S4method{>=}{matrix,fm}(e1, e2)

\S4method{>=}{fm,ANY}(e1, e2)

\S4method{>=}{ANY,fm}(e1, e2)

\S4method{>=}{fmV,ANY}(e1, e2)

\S4method{>=}{ANY,fmV}(e1, e2)

\S4method{<=}{fm,fm}(e1, e2)

\S4method{<=}{fmV,fmV}(e1, e2)

\S4method{<=}{fm,fmV}(e1, e2)

\S4method{<=}{fmV,fm}(e1, e2)

\S4method{<=}{fm,matrix}(e1, e2)

\S4method{<=}{matrix,fm}(e1, e2)

\S4method{<=}{fm,ANY}(e1, e2)

\S4method{<=}{ANY,fm}(e1, e2)

\S4method{<=}{fmV,ANY}(e1, e2)

\S4method{<=}{ANY,fmV}(e1, e2)

\S4method{<}{fm,fm}(e1, e2)

\S4method{<}{fmV,fmV}(e1, e2)

\S4method{<}{fm,fmV}(e1, e2)

\S4method{<}{fmV,fm}(e1, e2)

\S4method{<}{fm,matrix}(e1, e2)

\S4method{<}{matrix,fm}(e1, e2)

\S4method{<}{fm,ANY}(e1, e2)

\S4method{<}{ANY,fm}(e1, e2)

\S4method{<}{fmV,ANY}(e1, e2)

\S4method{<}{ANY,fmV}(e1, e2)
}
\arguments{
\item{e1, e2}{One of the operands need to be a FlashR object. If one operand
is a matrix and the other is a vector, we perform the arithmetic operation
on the vector and every column of the matrix. If one operand is a scalar,
we perform the operation on the scalar with every element in the matrix or
the vector.}
}
\description{
Binary operators which allow the comparison of values in atomic
vectors.
}
\examples{
mat1 <- fm.runif.matrix(100, 10)
mat2 <- fm.runif.matrix(100, 10)
mat <- mat1 == mat2
mat <- mat1 != mat2
mat <- mat1 < mat2
mat <- mat1 <= mat2
mat <- mat1 > mat2
mat <- mat1 >= mat2
}

